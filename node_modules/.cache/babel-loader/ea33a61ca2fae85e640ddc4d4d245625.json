{"ast":null,"code":"import _classCallCheck from\"/home/leandro/Desktop/robofriends/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/leandro/Desktop/robofriends/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/home/leandro/Desktop/robofriends/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/home/leandro/Desktop/robofriends/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/home/leandro/Desktop/robofriends/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from\"react\";import{connect}from\"react-redux\";import\"./App.css\";import CardList from\"../components/CardList\";import SearchBox from\"../components/SearchBox\";import Scroll from\"../components/Scroll\";import ErrorBoundary from\"../components/ErrorBoundary\";//import { robots } from \"./robots\";\nimport{setSearchField,requestRobots}from\"../actions\";var mapStateToProps=function mapStateToProps(state){return{searchField:state.searchRobots.searchField,robots:state.requestRobots.robots,isPending:state.requestRobots.isPending,error:state.requestRobots.error};};var mapDispatchToProps=function mapDispatchToProps(dispatch){return{onSearchChange:function onSearchChange(event){return dispatch(setSearchField(event.target.value));},onRequestRobots:function onRequestRobots(){return dispatch(requestRobots());}};};var App=/*#__PURE__*/function(_Component){_inherits(App,_Component);function App(){_classCallCheck(this,App);return _possibleConstructorReturn(this,_getPrototypeOf(App).apply(this,arguments));}_createClass(App,[{key:\"componentDidMount\",/*   constructor() {\n    super();\n    this.state = {\n      //robots: robots,\n      robots: []\n      //searchfield: \"\"\n    };\n  } */value:function componentDidMount(){this.props.onRequestRobots();//console.log(this.props.store.getState());\n// fetch(\"https://jsonplaceholder.typicode.com/users\")\n//   .then(response => response.json())\n//   .then(users => this.setState({ robots: users }));\n}// onSearchChange = event => {\n//   this.setState({ searchfield: event.target.value });\n// };\n},{key:\"render\",value:function render(){//const { robots, searchfield } = this.state;\n//const { robots } = this.state;\nvar _this$props=this.props,searchField=_this$props.searchField,onSearchChange=_this$props.onSearchChange,robots=_this$props.robots,isPending=_this$props.isPending;var filteredRobots=robots.filter(function(robot){return robot.name.toLowerCase().includes(searchField.toLowerCase());});return isPending?React.createElement(\"h1\",null,\"Loading...\"):React.createElement(\"div\",{className:\"tc\"},React.createElement(\"h1\",{className:\"f1\"},\"RoboFriends\"),React.createElement(SearchBox,{searchChange:onSearchChange}),React.createElement(Scroll,null,React.createElement(ErrorBoundary,null,React.createElement(CardList,{robots:filteredRobots}))));}}]);return App;}(Component);//connect() is a high order function, it returns a function. functionReturned(App)\nexport default connect(mapStateToProps,mapDispatchToProps)(App);","map":{"version":3,"sources":["/home/leandro/Desktop/robofriends/src/containers/App.js"],"names":["React","Component","connect","CardList","SearchBox","Scroll","ErrorBoundary","setSearchField","requestRobots","mapStateToProps","state","searchField","searchRobots","robots","isPending","error","mapDispatchToProps","dispatch","onSearchChange","event","target","value","onRequestRobots","App","props","filteredRobots","filter","robot","name","toLowerCase","includes"],"mappings":"klBAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CACA,OAASC,OAAT,KAAwB,aAAxB,CACA,MAAO,WAAP,CACA,MAAOC,CAAAA,QAAP,KAAqB,wBAArB,CACA,MAAOC,CAAAA,SAAP,KAAsB,yBAAtB,CACA,MAAOC,CAAAA,MAAP,KAAmB,sBAAnB,CACA,MAAOC,CAAAA,aAAP,KAA0B,6BAA1B,CACA;AACA,OAASC,cAAT,CAAyBC,aAAzB,KAA8C,YAA9C,CAEA,GAAMC,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAAAC,KAAK,CAAI,CAC/B,MAAO,CACLC,WAAW,CAAED,KAAK,CAACE,YAAN,CAAmBD,WAD3B,CAELE,MAAM,CAAEH,KAAK,CAACF,aAAN,CAAoBK,MAFvB,CAGLC,SAAS,CAAEJ,KAAK,CAACF,aAAN,CAAoBM,SAH1B,CAILC,KAAK,CAAEL,KAAK,CAACF,aAAN,CAAoBO,KAJtB,CAAP,CAMD,CAPD,CASA,GAAMC,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,CAAAC,QAAQ,CAAI,CACrC,MAAO,CACLC,cAAc,CAAE,wBAAAC,KAAK,QAAIF,CAAAA,QAAQ,CAACV,cAAc,CAACY,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAf,CAAZ,EADhB,CAELC,eAAe,CAAE,iCAAML,CAAAA,QAAQ,CAACT,aAAa,EAAd,CAAd,EAFZ,CAAP,CAID,CALD,C,GAOMe,CAAAA,G,qOACJ;;;;;;;wCAQoB,CAClB,KAAKC,KAAL,CAAWF,eAAX,GACA;AACA;AACA;AACA;AACD,CACD;AACA;AACA;uCACS,CACP;AACA;AAFO,gBAGoD,KAAKE,KAHzD,CAGCb,WAHD,aAGCA,WAHD,CAGcO,cAHd,aAGcA,cAHd,CAG8BL,MAH9B,aAG8BA,MAH9B,CAGsCC,SAHtC,aAGsCA,SAHtC,CAIP,GAAMW,CAAAA,cAAc,CAAGZ,MAAM,CAACa,MAAP,CAAc,SAAAC,KAAK,CAAI,CAC5C,MAAOA,CAAAA,KAAK,CAACC,IAAN,CAAWC,WAAX,GAAyBC,QAAzB,CAAkCnB,WAAW,CAACkB,WAAZ,EAAlC,CAAP,CACD,CAFsB,CAAvB,CAGA,MAAOf,CAAAA,SAAS,CACd,2CADc,CAGd,2BAAK,SAAS,CAAC,IAAf,EACE,0BAAI,SAAS,CAAC,IAAd,gBADF,CAEE,oBAAC,SAAD,EAAW,YAAY,CAAEI,cAAzB,EAFF,CAGE,oBAAC,MAAD,MACE,oBAAC,aAAD,MACE,oBAAC,QAAD,EAAU,MAAM,CAAEO,cAAlB,EADF,CADF,CAHF,CAHF,CAaD,C,iBAvCexB,S,EAyClB;AACA,cAAeC,CAAAA,OAAO,CAACO,eAAD,CAAkBO,kBAAlB,CAAP,CAA6CO,GAA7C,CAAf","sourcesContent":["import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport \"./App.css\";\nimport CardList from \"../components/CardList\";\nimport SearchBox from \"../components/SearchBox\";\nimport Scroll from \"../components/Scroll\";\nimport ErrorBoundary from \"../components/ErrorBoundary\";\n//import { robots } from \"./robots\";\nimport { setSearchField, requestRobots } from \"../actions\";\n\nconst mapStateToProps = state => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onSearchChange: event => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots())\n  };\n};\n\nclass App extends Component {\n  /*   constructor() {\n    super();\n    this.state = {\n      //robots: robots,\n      robots: []\n      //searchfield: \"\"\n    };\n  } */\n  componentDidMount() {\n    this.props.onRequestRobots();\n    //console.log(this.props.store.getState());\n    // fetch(\"https://jsonplaceholder.typicode.com/users\")\n    //   .then(response => response.json())\n    //   .then(users => this.setState({ robots: users }));\n  }\n  // onSearchChange = event => {\n  //   this.setState({ searchfield: event.target.value });\n  // };\n  render() {\n    //const { robots, searchfield } = this.state;\n    //const { robots } = this.state;\n    const { searchField, onSearchChange, robots, isPending } = this.props;\n    const filteredRobots = robots.filter(robot => {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    });\n    return isPending ? (\n      <h1>Loading...</h1>\n    ) : (\n      <div className=\"tc\">\n        <h1 className=\"f1\">RoboFriends</h1>\n        <SearchBox searchChange={onSearchChange} />\n        <Scroll>\n          <ErrorBoundary>\n            <CardList robots={filteredRobots} />\n          </ErrorBoundary>\n        </Scroll>\n      </div>\n    );\n  }\n}\n//connect() is a high order function, it returns a function. functionReturned(App)\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n"]},"metadata":{},"sourceType":"module"}