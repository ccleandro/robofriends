{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","components/Header.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","id","name","email","className","src","alt","CardList","robots","cardsArray","map","user","i","key","SearchBox","searchfield","searchChange","aria-label","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","Header","nextProps","nextState","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.06974d8e.chunk.js","sourcesContent":["import React from \"react\";\n//const Card = props => {\nconst Card = ({ id, name, email }) => {\n  return (\n    <div className=\"tc bg-light-green dib br3 pa3 ma2 grow ba b--black-10 shadow-5 \">\n      <img src={`https://robohash.org//${id}?200x200`} alt=\"robots\"></img>\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from \"react\";\nimport Card from \"./Card\";\n\nconst CardList = ({ robots }) => {\n  //if (true) throw new Error(\"Booom\");\n  const cardsArray = robots.map((user, i) => {\n    return (\n      <Card\n        key={robots[i].id}\n        id={robots[i].id}\n        name={robots[i].name}\n        email={robots[i].email}\n      />\n    );\n  });\n  return <div>{cardsArray}</div>;\n};\n\nexport default CardList;\n","import React from \"react\";\n\nconst SearchBox = ({ searchfield, searchChange }) => {\n  return (\n    <div className=\"pa2\">\n      <input\n        aria-label=\"Search Robots\"\n        className=\"pa3 ba b--green bg-lightest-blue\"\n        type=\"search\"\n        placeholder=\"search robots...\"\n        onChange={searchChange}\n      />\n    </div>\n  );\n};\n\nexport default SearchBox;\n","import React from \"react\";\n\nconst Scroll = props => {\n  return (\n    <div\n      style={{\n        overflow: \"visible\",\n        border: \"1px solid black\",\n        height: \"8oopx\"\n      }}\n    >\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;\n","import React, { Component } from \"react\";\n\nclass ErrorBoundary extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n  componentDidCatch(error, info) {\n    this.setState({ hasError: true });\n  }\n  render() {\n    return this.state.hasError ? (\n      <h1>Sorry, try again!</h1>\n    ) : (\n      this.props.children\n    );\n  }\n}\n\nexport default ErrorBoundary;\n","import React, { Component } from \"react\";\n\nclass Header extends Component {\n  shouldComponentUpdate(nextProps, nextState) {\n    //console.log(\"Header will never be updated, be careful\", nextProps, nextState);\n    return false;\n  }\n\n  render() {\n    return <h1 className=\"f1\">RoboFriends</h1>;\n  }\n}\n\nexport default Header;\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport \"./App.css\";\nimport CardList from \"../components/CardList\";\nimport SearchBox from \"../components/SearchBox\";\nimport Scroll from \"../components/Scroll\";\nimport ErrorBoundary from \"../components/ErrorBoundary\";\nimport Header from \"../components/Header\";\nimport { setSearchField, requestRobots } from \"../actions\";\n\nconst mapStateToProps = state => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onSearchChange: event => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots())\n  };\n};\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.onRequestRobots();\n  }\n\n  render() {\n    const { searchField, onSearchChange, robots, isPending } = this.props;\n    const filteredRobots = robots.filter(robot => {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    });\n    return isPending ? (\n      <h1>Loading...</h1>\n    ) : (\n      <div className=\"tc\">\n        <Header />\n        <SearchBox searchChange={onSearchChange} />\n        <Scroll>\n          <ErrorBoundary>\n            <CardList robots={filteredRobots} />\n          </ErrorBoundary>\n        </Scroll>\n      </div>\n    );\n  }\n}\n//connect() is a high order function, it returns a function. functionReturned(App)\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n} from \"./constants\";\n\nexport const setSearchField = text => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text\n});\n\nexport const requestRobots = () => dispatch => {\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\n  fetch(\"https://jsonplaceholder.typicode.com/users\")\n    .then(response => response.json())\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n    .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }));\n};\n","export const CHANGE_SEARCH_FIELD = \"CHANGE_SEARCH_FIELD\";\n\nexport const REQUEST_ROBOTS_PENDING = \"REQUEST_ROBOTS_PENDING\";\nexport const REQUEST_ROBOTS_SUCCESS = \"REQUEST_ROBOTS_SUCCESS\";\nexport const REQUEST_ROBOTS_FAILED = \"REQUEST_ROBOTS_FAILED\";\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n} from \"./constants\";\n\nconst initialStateSearch = {\n  searchField: \"\"\n};\n\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\n  switch (action.type) {\n    case CHANGE_SEARCH_FIELD:\n      return Object.assign({}, state, { searchField: action.payload });\n    default:\n      return state;\n  }\n};\n\nconst initialStateRobots = {\n  isPending: false,\n  robots: [],\n  error: \"\"\n};\n\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\n  switch (action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return Object.assign({}, state, { isPending: true });\n    case REQUEST_ROBOTS_SUCCESS:\n      return Object.assign({}, state, {\n        robots: action.payload,\n        isPending: false\n      });\n    case REQUEST_ROBOTS_FAILED:\n      return Object.assign({}, state, {\n        error: action.payload,\n        isPending: false\n      });\n    default:\n      return state;\n  }\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware, combineReducers } from \"redux\";\nimport { createLogger } from \"redux-logger\";\nimport thunkMiddleware from \"redux-thunk\";\nimport \"./index.css\";\nimport App from \"./containers/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { searchRobots, requestRobots } from \"./reducers\";\nimport \"tachyons\";\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\n\nconst store = createStore(\n  rootReducer,\n  applyMiddleware(thunkMiddleware, logger)\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.register();\n"],"sourceRoot":""}